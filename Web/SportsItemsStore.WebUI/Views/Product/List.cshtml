@model SportsItemsStore.WebUI.Models.ProductsListViewModel

@{
    ViewBag.Title = "Products";
}

@{
    string sessionSearhTerm = null;
    if (Session["SearchTerm"] != null)
    {
        sessionSearhTerm = (string)Session["SearchTerm"];
    }
} 

<style>
    .searchwrap {
    background: url("/content/images/misc/search1.png") no-repeat scroll 5px center #dedede;
    border: 3px solid #87b4d0;
    border-radius: 3px / 2px;
    box-shadow: 0 1px 4px rgba(0, 0, 1, 0.15) inset;
    cursor: text;
    margin-bottom: 10px;
    /*padding: 15px 10px;*/
    transition: border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s;
    width: 270px;
}
input.search {
    background: none repeat scroll 0 0 transparent;
    border: 0 none;
    color: #7e7e7e;
    font-size: 18px;
    font-style: italic;
    font-weight: 300;
    line-height: 20px;
    margin-left: 40px;
    outline: 0 none;
    text-align: left;
    /*width: 200px;*/
}


.pull-right {
    float: right !important;
}

/*#SearchSubmit {
    position: absolute;
    right: 0;
    top: 3px;
}*/

#SearchSubmit {
    cursor: pointer;
}

/*.pull-right {
    float: right !important;
}
.pull-right {
    float: right;
}
img {
    max-width: 100%;
}
img {
    vertical-align: middle;
}
img {
    border: 0 none;
}*/


.ui-autocomplete .ui-menu .ui-widget .ui-widget-content .ui-corner-all {
    display: block;
    left: 227px;
    top: 110.4px;
    width: 270px;
    z-index: 1;
}
</style>



<div>
@using (@Html.BeginForm("List", "Product", new { @class = "form-inline" }))
{ 
     @*<form class="navbar-form navbar-right">*@
         <div class="searchwrap" >
            
            @Html.TextBox("searchTerm", null, new { id = "txtSearch", @class = "search", @style = "width:initial !important",@placeholder="Product Search" })
            <img src="@Url.Content("~/Content/images/misc/Search2.png")" class="pull-right" 
             id="SearchSubmit" alt="Search" />

             @*<input type="submit" value="Search" class="btn btn-info"/>*@
        </div>
     
   @* </form>*@
}

</div>

<div class="productList">

@foreach (var p in Model.Products)
{
    Html.RenderPartial("ProductSummary", p);
}

<div class="pager">
    @*@Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new {page = x , category=Model.CurrentCategory, sizeId=Model.PagingInfo.SizeId}))*@
   @* @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new {page = x , category=Model.CurrentCategory}))*@

   @if ((Model.SearchTerm != null && Model.SearchTerm != "") || sessionSearhTerm != null)
   {
        @*if (Model.PagingInfo.SizeId > 0)
        { 
        
           @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new { page = x, category = Model.CurrentCategory, sizeId = Model.PagingInfo.SizeId, searchTerm = @sessionSearhTerm }))
        }
        else if (Model.PagingInfo.ColorId > 0)
        { 
        
           @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new { page = x, category = Model.CurrentCategory, colorId = Model.PagingInfo.ColorId, searchTerm = @sessionSearhTerm }))
        }
        else if (Model.PagingInfo.StartPrice > 0 || Model.PagingInfo.EndPrice > 0)
        {
             @Html.PageLinks(Model.PagingInfo, x => Url.Action("GetallByPriceRange", new { page = x, category = Model.CurrentCategory, start = Model.PagingInfo.StartPrice, end = Model.PagingInfo.EndPrice, searchTerm = @sessionSearhTerm }))
        }
        else
        {
             @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new { page = x, category = Model.CurrentCategory, searchTerm = @sessionSearhTerm })) 
        }*@
       
       if (Model.PagingInfo.StartPrice > 0 || Model.PagingInfo.EndPrice > 0)
       {
           if (Model.PagingInfo.SizeId > 0 && Model.PagingInfo.ColorId > 0)
           { 
        
               @Html.PageLinks(Model.PagingInfo, x => Url.Action("GetallByPriceRange", new { page = x, category = Model.CurrentCategory, sizeId = Model.PagingInfo.SizeId, colorId = Model.PagingInfo.ColorId, start = Model.PagingInfo.StartPrice, end = Model.PagingInfo.EndPrice, searchTerm = @sessionSearhTerm }))
           }
           else if (Model.PagingInfo.SizeId > 0 && Model.PagingInfo.ColorId == 0)
           {         
               @Html.PageLinks(Model.PagingInfo, x => Url.Action("GetallByPriceRange", new { page = x, category = Model.CurrentCategory, sizeId = Model.PagingInfo.SizeId, start = Model.PagingInfo.StartPrice, end = Model.PagingInfo.EndPrice, searchTerm = @sessionSearhTerm }))
           }
           else if (Model.PagingInfo.ColorId > 0 && Model.PagingInfo.SizeId == 0)
           { 
        
               @Html.PageLinks(Model.PagingInfo, x => Url.Action("GetallByPriceRange", new { page = x, category = Model.CurrentCategory, colorId = Model.PagingInfo.ColorId, start = Model.PagingInfo.StartPrice, end = Model.PagingInfo.EndPrice, searchTerm = @sessionSearhTerm }))
           }
           else
           {
             @Html.PageLinks(Model.PagingInfo, x => Url.Action("GetallByPriceRange", new { page = x, category = Model.CurrentCategory, start = Model.PagingInfo.StartPrice, end = Model.PagingInfo.EndPrice, searchTerm = @sessionSearhTerm }))
           }
       }
       else if (Model.PagingInfo.SizeId > 0 && Model.PagingInfo.ColorId > 0)
       { 
        
           @Html.PageLinks(Model.PagingInfo, x => Url.Action("SearchWithFilters", new { page = x, category = Model.CurrentCategory, sizeId = Model.PagingInfo.SizeId, colorId = Model.PagingInfo.ColorId, searchTerm = @sessionSearhTerm }))
       }
       else if (Model.PagingInfo.SizeId > 0 && Model.PagingInfo.ColorId == 0)
       {         
           @Html.PageLinks(Model.PagingInfo, x => Url.Action("SearchWithFilters", new { page = x, category = Model.CurrentCategory, sizeId = Model.PagingInfo.SizeId, searchTerm = @sessionSearhTerm }))
       }
       else if (Model.PagingInfo.ColorId > 0 && Model.PagingInfo.SizeId == 0)
       { 
        
           @Html.PageLinks(Model.PagingInfo, x => Url.Action("SearchWithFilters", new { page = x, category = Model.CurrentCategory, colorId = Model.PagingInfo.ColorId, searchTerm = @sessionSearhTerm }))
       }
       else
       {
             @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new { page = x, category = Model.CurrentCategory, searchTerm = @sessionSearhTerm })) 
       }
   }
   else
   {
        @*if (Model.PagingInfo.SizeId > 0)
        { 
        
           @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new { page = x, category = Model.CurrentCategory, sizeId = Model.PagingInfo.SizeId }))
        }

        else if (Model.PagingInfo.ColorId > 0)
        {
            @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new { page = x, category = Model.CurrentCategory, colorId = Model.PagingInfo.ColorId }))
        }
        else if (Model.PagingInfo.StartPrice > 0 || Model.PagingInfo.EndPrice > 0)
        {
             @Html.PageLinks(Model.PagingInfo, x => Url.Action("GetallByPriceRange", new { page = x, category = Model.CurrentCategory, start = Model.PagingInfo.StartPrice, end = Model.PagingInfo.EndPrice }))
        }
        else
        {
             @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new { page = x, category = Model.CurrentCategory }))
        }*@
       if (Model.PagingInfo.StartPrice > 0 || Model.PagingInfo.EndPrice > 0)
       {
           if (Model.PagingInfo.SizeId > 0 && Model.PagingInfo.ColorId > 0)
           {         
                @Html.PageLinks(Model.PagingInfo, x => Url.Action("GetallByPriceRange", new { page = x, category = Model.CurrentCategory, sizeId = Model.PagingInfo.SizeId, colorId = Model.PagingInfo.ColorId, start = Model.PagingInfo.StartPrice, end = Model.PagingInfo.EndPrice }))
           }
           else if (Model.PagingInfo.SizeId > 0 && Model.PagingInfo.ColorId == 0)
           { 
        
                @Html.PageLinks(Model.PagingInfo, x => Url.Action("GetallByPriceRange", new { page = x, category = Model.CurrentCategory, sizeId = Model.PagingInfo.SizeId, start = Model.PagingInfo.StartPrice, end = Model.PagingInfo.EndPrice }))
           }
           else if (Model.PagingInfo.ColorId > 0 && Model.PagingInfo.SizeId == 0)
           {
                @Html.PageLinks(Model.PagingInfo, x => Url.Action("GetallByPriceRange", new { page = x, category = Model.CurrentCategory, colorId = Model.PagingInfo.ColorId, start = Model.PagingInfo.StartPrice, end = Model.PagingInfo.EndPrice }))
           }
           else
           {
                @Html.PageLinks(Model.PagingInfo, x => Url.Action("GetallByPriceRange", new { page = x, category = Model.CurrentCategory, start = Model.PagingInfo.StartPrice, end = Model.PagingInfo.EndPrice }))
           }
       }
       else if (Model.PagingInfo.SizeId > 0 && Model.PagingInfo.ColorId > 0)
       {         
           @Html.PageLinks(Model.PagingInfo, x => Url.Action("SearchWithFilters", new { page = x, category = Model.CurrentCategory, sizeId = Model.PagingInfo.SizeId, colorId = Model.PagingInfo.ColorId }))
       }

       else if (Model.PagingInfo.SizeId > 0 && Model.PagingInfo.ColorId == 0)
       { 
        
           @Html.PageLinks(Model.PagingInfo, x => Url.Action("SearchWithFilters", new { page = x, category = Model.CurrentCategory, sizeId = Model.PagingInfo.SizeId }))
       }

       else if (Model.PagingInfo.ColorId > 0 && Model.PagingInfo.SizeId == 0)
       {
            @Html.PageLinks(Model.PagingInfo, x => Url.Action("SearchWithFilters", new { page = x, category = Model.CurrentCategory, colorId = Model.PagingInfo.ColorId }))
       }
       else
       {
             @Html.PageLinks(Model.PagingInfo, x => Url.Action("List", new { page = x, category = Model.CurrentCategory }))
       }
   }

</div>

</div>

<script type="text/javascript">
    $(document).ready(function () {
        $(document).on("click", "#SearchSubmit", function () {
            var form = $(this).closest("form");
            //console.log(form);
            form.submit();
        });
        $("#txtSearch").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetProducts")',
                    data: { term: request.term },
                    dataType: "json",
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item,
                                value: item
                            }
                        }))
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(textStatus);
                    }
                });
            },
            minLength: 1
        });
    });
</script>


